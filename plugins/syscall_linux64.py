import os
from typing import Optional

from code_emitter import CodeEmitter
from lifters.core_lifter import CoreLifter
from lifters.program_lifter import ProgramLifter

SYSCALL_N_REG = 'rax'
SYSCALL_OUT_REG = 'rax'
SYSCALL_ARGS = ['rdi', 'rsi', 'rdx', 'r10', 'r8', 'r9']
SYSCALL_CLOBBERS = ['rcx', 'r11', 'memory']

GENERIC_CONSTRAINT = 'r'
REG_TO_CONSTRAINT = {
    'rax': 'a',
    'rdi': 'D',
    'rsi': 'S',
    'rdx': 'd',
    'r10': GENERIC_CONSTRAINT,
    'r8': GENERIC_CONSTRAINT,
    'r9': GENERIC_CONSTRAINT,
}
SYSCALLS: list[tuple[Optional[str], list[str]]] = [
    ('read', ['unsigned int fd', 'char __user *buf', 'size_t count']),
    ('write', ['unsigned int fd', 'const char __user *buf', 'size_t count']),
    ('open', ['const char __user *filename', 'int flags', 'umode_t mode']),
    ('close', ['unsigned int fd']),
    ('newstat', ['const char __user *filename', 'struct stat __user *statbuf']),
    ('newfstat', ['unsigned int fd', 'struct stat __user *statbuf']),
    ('newlstat', ['const char __user *filename', 'struct stat __user *statbuf']),
    ('poll', ['struct pollfd __user *ufds', 'unsigned int nfds', 'int timeout']),
    ('lseek', ['unsigned int fd', 'off_t offset', 'unsigned int whence']),
    ('mmap', ['unsigned long addr', 'unsigned long len', 'int prot', 'int flags', 'int fd', 'long off']),
    ('mprotect', ['unsigned long start', 'size_t len', 'unsigned long prot']),
    ('munmap', ['unsigned long addr', 'size_t len']),
    ('brk', ['unsigned long brk']),
    ('rt_sigaction', ['int', 'const struct sigaction __user *', 'struct sigaction __user *', 'size_t']),
    ('rt_sigprocmask', ['int how', 'sigset_t __user *set', 'sigset_t __user *oset', 'size_t sigsetsize']),
    ('rt_sigreturn', ['void']),
    ('ioctl', ['unsigned int fd', 'unsigned int cmd', 'unsigned long arg']),
    ('pread64', ['unsigned int fd', 'char __user *buf', 'size_t count', 'loff_t pos']),
    ('pwrite64', ['unsigned int fd', 'const char __user *buf', 'size_t count', 'loff_t pos']),
    ('readv', ['unsigned long fd', 'const struct iovec __user *vec', 'unsigned long vlen']),
    ('writev', ['unsigned long fd', 'const struct iovec __user *vec', 'unsigned long vlen']),
    ('access', ['const char __user *filename', 'int mode']),
    ('pipe', ['int __user *fildes']),
    ('select', ['int n', 'fd_set __user *inp', 'fd_set __user *outp', 'fd_set __user *exp', 'struct __kernel_old_timeval __user *tvp']),
    ('sched_yield', ['void']),
    ('mremap', ['unsigned long addr', 'unsigned long old_len', 'unsigned long new_len', 'unsigned long flags', 'unsigned long new_addr']),
    ('msync', ['unsigned long start', 'size_t len', 'int flags']),
    ('mincore', ['unsigned long start', 'size_t len', 'unsigned char __user * vec']),
    ('madvise', ['unsigned long start', 'size_t len', 'int behavior']),
    ('shmget', ['key_t key', 'size_t size', 'int flag']),
    ('shmat', ['int shmid', 'char __user *shmaddr', 'int shmflg']),
    ('shmctl', ['int shmid', 'int cmd', 'struct shmid_ds __user *buf']),
    ('dup', ['unsigned int fildes']),
    ('dup2', ['unsigned int oldfd', 'unsigned int newfd']),
    ('pause', ['void']),
    ('nanosleep', ['struct __kernel_timespec __user *rqtp', 'struct __kernel_timespec __user *rmtp']),
    ('getitimer', ['int which', 'struct __kernel_old_itimerval __user *value']),
    ('alarm', ['unsigned int seconds']),
    ('setitimer', ['int which', 'struct __kernel_old_itimerval __user *value', 'struct __kernel_old_itimerval __user *ovalue']),
    ('getpid', ['void']),
    ('sendfile64', ['int out_fd', 'int in_fd', 'loff_t __user *offset', 'size_t count']),
    ('socket', ['int', 'int', 'int']),
    ('connect', ['int', 'struct sockaddr __user *', 'int']),
    ('accept', ['int', 'struct sockaddr __user *', 'int __user *']),
    ('sendto', ['int', 'void __user *', 'size_t', 'unsigned', 'struct sockaddr __user *', 'int']),
    ('recvfrom', ['int', 'void __user *', 'size_t', 'unsigned', 'struct sockaddr __user *', 'int __user *']),
    ('sendmsg', ['int fd', 'struct user_msghdr __user *msg', 'unsigned flags']),
    ('recvmsg', ['int fd', 'struct user_msghdr __user *msg', 'unsigned flags']),
    ('shutdown', ['int', 'int']),
    ('bind', ['int', 'struct sockaddr __user *', 'int']),
    ('listen', ['int', 'int']),
    ('getsockname', ['int', 'struct sockaddr __user *', 'int __user *']),
    ('getpeername', ['int', 'struct sockaddr __user *', 'int __user *']),
    ('socketpair', ['int', 'int', 'int', 'int __user *']),
    ('setsockopt', ['int fd', 'int level', 'int optname', 'char __user *optval', 'int optlen']),
    ('getsockopt', ['int fd', 'int level', 'int optname', 'char __user *optval', 'int __user *optlen']),
    ('clone', ['unsigned long', 'unsigned long', 'int __user *', 'unsigned long', 'int __user *']),
    ('fork', ['void']),
    ('vfork', ['void']),
    ('execve', ['const char __user *filename', 'const char __user *const __user *argv', 'const char __user *const __user *envp']),
    ('exit', ['int error_code']),
    ('wait4', ['pid_t pid', 'int __user *stat_addr', 'int options', 'struct rusage __user *ru']),
    ('kill', ['pid_t pid', 'int sig']),
    ('newuname', ['struct new_utsname __user *name']),
    ('semget', ['key_t key', 'int nsems', 'int semflg']),
    ('semop', ['int semid', 'struct sembuf __user *sops', 'unsigned nsops']),
    ('semctl', ['int semid', 'int semnum', 'int cmd', 'unsigned long arg']),
    ('shmdt', ['char __user *shmaddr']),
    ('msgget', ['key_t key', 'int msgflg']),
    ('msgsnd', ['int msqid', 'struct msgbuf __user *msgp', 'size_t msgsz', 'int msgflg']),
    ('msgrcv', ['int msqid', 'struct msgbuf __user *msgp', 'size_t msgsz', 'long msgtyp', 'int msgflg']),
    ('msgctl', ['int msqid', 'int cmd', 'struct msqid_ds __user *buf']),
    ('fcntl', ['unsigned int fd', 'unsigned int cmd', 'unsigned long arg']),
    ('flock', ['unsigned int fd', 'unsigned int cmd']),
    ('fsync', ['unsigned int fd']),
    ('fdatasync', ['unsigned int fd']),
    ('truncate', ['const char __user *path', 'long length']),
    ('ftruncate', ['unsigned int fd', 'unsigned long length']),
    ('getdents', ['unsigned int fd', 'struct linux_dirent __user *dirent', 'unsigned int count']),
    ('getcwd', ['char __user *buf', 'unsigned long size']),
    ('chdir', ['const char __user *filename']),
    ('fchdir', ['unsigned int fd']),
    ('rename', ['const char __user *oldname', 'const char __user *newname']),
    ('mkdir', ['const char __user *pathname', 'umode_t mode']),
    ('rmdir', ['const char __user *pathname']),
    ('creat', ['const char __user *pathname', 'umode_t mode']),
    ('link', ['const char __user *oldname', 'const char __user *newname']),
    ('unlink', ['const char __user *pathname']),
    ('symlink', ['const char __user *old', 'const char __user *new']),
    ('readlink', ['const char __user *path', 'char __user *buf', 'int bufsiz']),
    ('chmod', ['const char __user *filename', 'umode_t mode']),
    ('fchmod', ['unsigned int fd', 'umode_t mode']),
    ('chown', ['const char __user *filename', 'uid_t user', 'gid_t group']),
    ('fchown', ['unsigned int fd', 'uid_t user', 'gid_t group']),
    ('lchown', ['const char __user *filename', 'uid_t user', 'gid_t group']),
    ('umask', ['int mask']),
    ('gettimeofday', ['struct __kernel_old_timeval __user *tv', 'struct timezone __user *tz']),
    ('getrlimit', ['unsigned int resource', 'struct rlimit __user *rlim']),
    ('getrusage', ['int who', 'struct rusage __user *ru']),
    ('sysinfo', ['struct sysinfo __user *info']),
    ('times', ['struct tms __user *tbuf']),
    ('ptrace', ['long request', 'long pid', 'unsigned long addr', 'unsigned long data']),
    ('getuid', ['void']),
    ('syslog', ['int type', 'char __user *buf', 'int len']),
    ('getgid', ['void']),
    ('setuid', ['uid_t uid']),
    ('setgid', ['gid_t gid']),
    ('geteuid', ['void']),
    ('getegid', ['void']),
    ('setpgid', ['pid_t pid', 'pid_t pgid']),
    ('getppid', ['void']),
    ('getpgrp', ['void']),
    ('setsid', ['void']),
    ('setreuid', ['uid_t ruid', 'uid_t euid']),
    ('setregid', ['gid_t rgid', 'gid_t egid']),
    ('getgroups', ['int gidsetsize', 'gid_t __user *grouplist']),
    ('setgroups', ['int gidsetsize', 'gid_t __user *grouplist']),
    ('setresuid', ['uid_t ruid', 'uid_t euid', 'uid_t suid']),
    ('getresuid', ['uid_t __user *ruid', 'uid_t __user *euid', 'uid_t __user *suid']),
    ('setresgid', ['gid_t rgid', 'gid_t egid', 'gid_t sgid']),
    ('getresgid', ['gid_t __user *rgid', 'gid_t __user *egid', 'gid_t __user *sgid']),
    ('getpgid', ['pid_t pid']),
    ('setfsuid', ['uid_t uid']),
    ('setfsgid', ['gid_t gid']),
    ('getsid', ['pid_t pid']),
    ('capget', ['cap_user_header_t header', 'cap_user_data_t dataptr']),
    ('capset', ['cap_user_header_t header', 'const cap_user_data_t data']),
    ('rt_sigpending', ['sigset_t __user *set', 'size_t sigsetsize']),
    ('rt_sigtimedwait', ['const sigset_t __user *uthese', 'siginfo_t __user *uinfo', 'const struct __kernel_timespec __user *uts', 'size_t sigsetsize']),
    ('rt_sigqueueinfo', ['pid_t pid', 'int sig', 'siginfo_t __user *uinfo']),
    ('rt_sigsuspend', ['sigset_t __user *unewset', 'size_t sigsetsize']),
    ('sigaltstack', ['const struct sigaltstack __user *uss', 'struct sigaltstack __user *uoss']),
    ('utime', ['char __user *filename', 'struct utimbuf __user *times']),
    ('mknod', ['const char __user *filename', 'umode_t mode', 'unsigned dev']),
    ('not implemented', []),
    ('personality', ['unsigned int personality']),
    ('ustat', ['unsigned dev', 'struct ustat __user *ubuf']),
    ('statfs', ['const char __user * path', 'struct statfs __user *buf']),
    ('fstatfs', ['unsigned int fd', 'struct statfs __user *buf']),
    ('sysfs', ['int option', 'unsigned long arg1', 'unsigned long arg2']),
    ('getpriority', ['int which', 'int who']),
    ('setpriority', ['int which', 'int who', 'int niceval']),
    ('sched_setparam', ['pid_t pid', 'struct sched_param __user *param']),
    ('sched_getparam', ['pid_t pid', 'struct sched_param __user *param']),
    ('sched_setscheduler', ['pid_t pid', 'int policy', 'struct sched_param __user *param']),
    ('sched_getscheduler', ['pid_t pid']),
    ('sched_get_priority_max', ['int policy']),
    ('sched_get_priority_min', ['int policy']),
    ('sched_rr_get_interval', ['pid_t pid', 'struct __kernel_timespec __user *interval']),
    ('mlock', ['unsigned long start', 'size_t len']),
    ('munlock', ['unsigned long start', 'size_t len']),
    ('mlockall', ['int flags']),
    ('munlockall', ['void']),
    ('vhangup', ['void']),
    (None, []),
    ('pivot_root', ['const char __user *new_root', 'const char __user *put_old']),
    ('ni_syscall', ['void']),
    ('prctl', ['int option', 'unsigned long arg2', 'unsigned long arg3', 'unsigned long arg4', 'unsigned long arg5']),
    (None, []),
    ('adjtimex', ['struct __kernel_timex __user *txc_p']),
    ('setrlimit', ['unsigned int resource', 'struct rlimit __user *rlim']),
    ('chroot', ['const char __user *filename']),
    ('sync', ['void']),
    ('acct', ['const char __user *name']),
    ('settimeofday', ['struct __kernel_old_timeval __user *tv', 'struct timezone __user *tz']),
    ('mount', ['char __user *dev_name', 'char __user *dir_name', 'char __user *type', 'unsigned long flags', 'void __user *data']),
    ('umount', ['char __user *name', 'int flags']),
    ('swapon', ['const char __user *specialfile', 'int swap_flags']),
    ('swapoff', ['const char __user *specialfile']),
    ('reboot', ['int magic1', 'int magic2', 'unsigned int cmd', 'void __user *arg']),
    ('sethostname', ['char __user *name', 'int len']),
    ('setdomainname', ['char __user *name', 'int len']),
    (None, []),
    ('ioperm', ['unsigned long from', 'unsigned long num', 'int on']),
    ('not implemented', []),
    ('init_module', ['void __user *umod', 'unsigned long len', 'const char __user *uargs']),
    ('delete_module', ['const char __user *name_user', 'unsigned int flags']),
    ('not implemented', []),
    ('not implemented', []),
    ('quotactl', ['unsigned int cmd', 'const char __user *special', 'qid_t id', 'void __user *addr']),
    ('not implemented', []),
    ('not implemented', []),
    ('not implemented', []),
    ('not implemented', []),
    ('not implemented', []),
    ('not implemented', []),
    ('gettid', ['void']),
    ('readahead', ['int fd', 'loff_t offset', 'size_t count']),
    ('setxattr', ['const char __user *path', 'const char __user *name', 'const void __user *value', 'size_t size', 'int flags']),
    ('lsetxattr', ['const char __user *path', 'const char __user *name', 'const void __user *value', 'size_t size', 'int flags']),
    ('fsetxattr', ['int fd', 'const char __user *name', 'const void __user *value', 'size_t size', 'int flags']),
    ('getxattr', ['const char __user *path', 'const char __user *name', 'void __user *value', 'size_t size']),
    ('lgetxattr', ['const char __user *path', 'const char __user *name', 'void __user *value', 'size_t size']),
    ('fgetxattr', ['int fd', 'const char __user *name', 'void __user *value', 'size_t size']),
    ('listxattr', ['const char __user *path', 'char __user *list', 'size_t size']),
    ('llistxattr', ['const char __user *path', 'char __user *list', 'size_t size']),
    ('flistxattr', ['int fd', 'char __user *list', 'size_t size']),
    ('removexattr', ['const char __user *path', 'const char __user *name']),
    ('lremovexattr', ['const char __user *path', 'const char __user *name']),
    ('fremovexattr', ['int fd', 'const char __user *name']),
    ('tkill', ['pid_t pid', 'int sig']),
    ('time', ['__kernel_old_time_t __user *tloc']),
    ('futex', ['u32 __user *uaddr', 'int op', 'u32 val', 'const struct __kernel_timespec __user *utime', 'u32 __user *uaddr2', 'u32 val3']),
    ('sched_setaffinity', ['pid_t pid', 'unsigned int len', 'unsigned long __user *user_mask_ptr']),
    ('sched_getaffinity', ['pid_t pid', 'unsigned int len', 'unsigned long __user *user_mask_ptr']),
    ('not implemented', []),
    ('io_setup', ['unsigned nr_reqs', 'aio_context_t __user *ctx']),
    ('io_destroy', ['aio_context_t ctx']),
    ('io_getevents', ['aio_context_t ctx_id', 'long min_nr', 'long nr', 'struct io_event __user *events', 'struct __kernel_timespec __user *timeout']),
    ('io_submit', ['aio_context_t', 'long', 'struct iocb __user * __user *']),
    ('io_cancel', ['aio_context_t ctx_id', 'struct iocb __user *iocb', 'struct io_event __user *result']),
    ('not implemented', []),
    ('lookup_dcookie', ['u64 cookie64', 'char __user *buf', 'size_t len']),
    ('epoll_create', ['int size']),
    ('not implemented', []),
    ('not implemented', []),
    ('remap_file_pages', ['unsigned long start', 'unsigned long size', 'unsigned long prot', 'unsigned long pgoff', 'unsigned long flags']),
    ('getdents64', ['unsigned int fd', 'struct linux_dirent64 __user *dirent', 'unsigned int count']),
    ('set_tid_address', ['int __user *tidptr']),
    ('restart_syscall', ['void']),
    ('semtimedop', ['int semid', 'struct sembuf __user *sops', 'unsigned nsops', 'const struct __kernel_timespec __user *timeout']),
    ('fadvise64', ['int fd', 'loff_t offset', 'size_t len', 'int advice']),
    ('timer_create', ['clockid_t which_clock', 'struct sigevent __user *timer_event_spec', 'timer_t __user * created_timer_id']),
    ('timer_settime', ['timer_t timer_id', 'int flags', 'const struct __kernel_itimerspec __user *new_setting', 'struct __kernel_itimerspec __user *old_setting']),
    ('timer_gettime', ['timer_t timer_id', 'struct __kernel_itimerspec __user *setting']),
    ('timer_getoverrun', ['timer_t timer_id']),
    ('timer_delete', ['timer_t timer_id']),
    ('clock_settime', ['clockid_t which_clock', 'const struct __kernel_timespec __user *tp']),
    ('clock_gettime', ['clockid_t which_clock', 'struct __kernel_timespec __user *tp']),
    ('clock_getres', ['clockid_t which_clock', 'struct __kernel_timespec __user *tp']),
    ('clock_nanosleep', ['clockid_t which_clock', 'int flags', 'const struct __kernel_timespec __user *rqtp', 'struct __kernel_timespec __user *rmtp']),
    ('exit_group', ['int error_code']),
    ('epoll_wait', ['int epfd', 'struct epoll_event __user *events', 'int maxevents', 'int timeout']),
    ('epoll_ctl', ['int epfd', 'int op', 'int fd', 'struct epoll_event __user *event']),
    ('tgkill', ['pid_t tgid', 'pid_t pid', 'int sig']),
    ('utimes', ['char __user *filename', 'struct __kernel_old_timeval __user *utimes']),
    ('not implemented', []),
    ('mbind', ['unsigned long start', 'unsigned long len', 'unsigned long mode', 'const unsigned long __user *nmask', 'unsigned long maxnode', 'unsigned flags']),
    ('set_mempolicy', ['int mode', 'const unsigned long __user *nmask', 'unsigned long maxnode']),
    ('get_mempolicy', ['int __user *policy', 'unsigned long __user *nmask', 'unsigned long maxnode', 'unsigned long addr', 'unsigned long flags']),
    ('mq_open', ['const char __user *name', 'int oflag', 'umode_t mode', 'struct mq_attr __user *attr']),
    ('mq_unlink', ['const char __user *name']),
    ('mq_timedsend', ['mqd_t mqdes', 'const char __user *msg_ptr', 'size_t msg_len', 'unsigned int msg_prio', 'const struct __kernel_timespec __user *abs_timeout']),
    ('mq_timedreceive', ['mqd_t mqdes', 'char __user *msg_ptr', 'size_t msg_len', 'unsigned int __user *msg_prio', 'const struct __kernel_timespec __user *abs_timeout']),
    ('mq_notify', ['mqd_t mqdes', 'const struct sigevent __user *notification']),
    ('mq_getsetattr', ['mqd_t mqdes', 'const struct mq_attr __user *mqstat', 'struct mq_attr __user *omqstat']),
    ('kexec_load', ['unsigned long entry', 'unsigned long nr_segments', 'struct kexec_segment __user *segments', 'unsigned long flags']),
    ('waitid', ['int which', 'pid_t pid', 'struct siginfo __user *infop', 'int options', 'struct rusage __user *ru']),
    ('add_key', ['const char __user *_type', 'const char __user *_description', 'const void __user *_payload', 'size_t plen', 'key_serial_t destringid']),
    ('request_key', ['const char __user *_type', 'const char __user *_description', 'const char __user *_callout_info', 'key_serial_t destringid']),
    ('keyctl', ['int cmd', 'unsigned long arg2', 'unsigned long arg3', 'unsigned long arg4', 'unsigned long arg5']),
    ('ioprio_set', ['int which', 'int who', 'int ioprio']),
    ('ioprio_get', ['int which', 'int who']),
    ('inotify_init', ['void']),
    ('inotify_add_watch', ['int fd', 'const char __user *path', 'u32 mask']),
    ('inotify_rm_watch', ['int fd', '__s32 wd']),
    ('migrate_pages', ['pid_t pid', 'unsigned long maxnode', 'const unsigned long __user *from', 'const unsigned long __user *to']),
    ('openat', ['int dfd', 'const char __user *filename', 'int flags', 'umode_t mode']),
    ('mkdirat', ['int dfd', 'const char __user * pathname', 'umode_t mode']),
    ('mknodat', ['int dfd', 'const char __user * filename', 'umode_t mode', 'unsigned dev']),
    ('fchownat', ['int dfd', 'const char __user *filename', 'uid_t user', 'gid_t group', 'int flag']),
    ('futimesat', ['int dfd', 'const char __user *filename', 'struct __kernel_old_timeval __user *utimes']),
    ('newfstatat', ['int dfd', 'const char __user *filename', 'struct stat __user *statbuf', 'int flag']),
    ('unlinkat', ['int dfd', 'const char __user * pathname', 'int flag']),
    ('renameat', ['int olddfd', 'const char __user * oldname', 'int newdfd', 'const char __user * newname']),
    ('linkat', ['int olddfd', 'const char __user *oldname', 'int newdfd', 'const char __user *newname', 'int flags']),
    ('symlinkat', ['const char __user * oldname', 'int newdfd', 'const char __user * newname']),
    ('readlinkat', ['int dfd', 'const char __user *path', 'char __user *buf', 'int bufsiz']),
    ('fchmodat', ['int dfd', 'const char __user * filename', 'umode_t mode']),
    ('faccessat', ['int dfd', 'const char __user *filename', 'int mode']),
    ('pselect6', ['int', 'fd_set __user *', 'fd_set __user *', 'fd_set __user *', 'struct __kernel_timespec __user *', 'void __user *']),
    ('ppoll', ['struct pollfd __user *', 'unsigned int', 'struct __kernel_timespec __user *', 'const sigset_t __user *', 'size_t']),
    ('unshare', ['unsigned long unshare_flags']),
    ('set_robust_list', ['struct robust_list_head __user *head', 'size_t len']),
    ('get_robust_list', ['int pid', 'struct robust_list_head __user * __user *head_ptr', 'size_t __user *len_ptr']),
    ('splice', ['int fd_in', 'loff_t __user *off_in', 'int fd_out', 'loff_t __user *off_out', 'size_t len', 'unsigned int flags']),
    ('tee', ['int fdin', 'int fdout', 'size_t len', 'unsigned int flags']),
    ('sync_file_range', ['int fd', 'loff_t offset', 'loff_t nbytes', 'unsigned int flags']),
    ('vmsplice', ['int fd', 'const struct iovec __user *iov', 'unsigned long nr_segs', 'unsigned int flags']),
    ('move_pages', ['pid_t pid', 'unsigned long nr_pages', 'const void __user * __user *pages', 'const int __user *nodes', 'int __user *status', 'int flags']),
    ('utimensat', ['int dfd', 'const char __user *filename', 'struct __kernel_timespec __user *utimes', 'int flags']),
    ('epoll_pwait', ['int epfd', 'struct epoll_event __user *events', 'int maxevents', 'int timeout', 'const sigset_t __user *sigmask', 'size_t sigsetsize']),
    ('signalfd', ['int ufd', 'sigset_t __user *user_mask', 'size_t sizemask']),
    ('timerfd_create', ['int clockid', 'int flags']),
    ('eventfd', ['unsigned int count']),
    ('fallocate', ['int fd', 'int mode', 'loff_t offset', 'loff_t len']),
    ('timerfd_settime', ['int ufd', 'int flags', 'const struct __kernel_itimerspec __user *utmr', 'struct __kernel_itimerspec __user *otmr']),
    ('timerfd_gettime', ['int ufd', 'struct __kernel_itimerspec __user *otmr']),
    ('accept4', ['int', 'struct sockaddr __user *', 'int __user *', 'int']),
    ('signalfd4', ['int ufd', 'sigset_t __user *user_mask', 'size_t sizemask', 'int flags']),
    ('eventfd2', ['unsigned int count', 'int flags']),
    ('epoll_create1', ['int flags']),
    ('dup3', ['unsigned int oldfd', 'unsigned int newfd', 'int flags']),
    ('pipe2', ['int __user *fildes', 'int flags']),
    ('inotify_init1', ['int flags']),
    ('preadv', ['unsigned long fd', 'const struct iovec __user *vec', 'unsigned long vlen', 'unsigned long pos_l', 'unsigned long pos_h']),
    ('pwritev', ['unsigned long fd', 'const struct iovec __user *vec', 'unsigned long vlen', 'unsigned long pos_l', 'unsigned long pos_h']),
    ('rt_tgsigqueueinfo', ['pid_t tgid', 'pid_t pid', 'int sig', 'siginfo_t __user *uinfo']),
    ('perf_event_open', ['struct perf_event_attr __user *attr_uptr', 'pid_t pid', 'int cpu', 'int group_fd', 'unsigned long flags']),
    ('recvmmsg', ['int fd', 'struct mmsghdr __user *msg', 'unsigned int vlen', 'unsigned flags', 'struct __kernel_timespec __user *timeout']),
    ('fanotify_init', ['unsigned int flags', 'unsigned int event_f_flags']),
    ('fanotify_mark', ['int fanotify_fd', 'unsigned int flags', 'u64 mask', 'int fd', 'const char __user *pathname']),
    ('prlimit64', ['pid_t pid', 'unsigned int resource', 'const struct rlimit64 __user *new_rlim', 'struct rlimit64 __user *old_rlim']),
    ('name_to_handle_at', ['int dfd', 'const char __user *name', 'struct file_handle __user *handle', 'int __user *mnt_id', 'int flag']),
    ('open_by_handle_at', ['int mountdirfd', 'struct file_handle __user *handle', 'int flags']),
    ('clock_adjtime', ['clockid_t which_clock', 'struct __kernel_timex __user *tx']),
    ('syncfs', ['int fd']),
    ('sendmmsg', ['int fd', 'struct mmsghdr __user *msg', 'unsigned int vlen', 'unsigned flags']),
    ('setns', ['int fd', 'int nstype']),
    ('getcpu', ['unsigned __user *cpu', 'unsigned __user *node', 'struct getcpu_cache __user *cache']),
    ('process_vm_readv', ['pid_t pid', 'const struct iovec __user *lvec', 'unsigned long liovcnt', 'const struct iovec __user *rvec', 'unsigned long riovcnt', 'unsigned long flags']),
    ('process_vm_writev', ['pid_t pid', 'const struct iovec __user *lvec', 'unsigned long liovcnt', 'const struct iovec __user *rvec', 'unsigned long riovcnt', 'unsigned long flags']),
    ('kcmp', ['pid_t pid1', 'pid_t pid2', 'int type', 'unsigned long idx1', 'unsigned long idx2']),
    ('finit_module', ['int fd', 'const char __user *uargs', 'int flags']),
    ('sched_setattr', ['pid_t pid', 'struct sched_attr __user *attr', 'unsigned int flags']),
    ('sched_getattr', ['pid_t pid', 'struct sched_attr __user *attr', 'unsigned int size', 'unsigned int flags']),
    ('renameat2', ['int olddfd', 'const char __user *oldname', 'int newdfd', 'const char __user *newname', 'unsigned int flags']),
    ('seccomp', ['unsigned int op', 'unsigned int flags', 'void __user *uargs']),
    ('getrandom', ['char __user *buf', 'size_t count', 'unsigned int flags']),
    ('memfd_create', ['const char __user *uname_ptr', 'unsigned int flags']),
    ('kexec_file_load', ['int kernel_fd', 'int initrd_fd', 'unsigned long cmdline_len', 'const char __user *cmdline_ptr', 'unsigned long flags']),
    ('bpf', ['int cmd', 'union bpf_attr *attr', 'unsigned int size']),
    ('execveat', ['int dfd', 'const char __user *filename', 'const char __user *const __user *argv', 'const char __user *const __user *envp', 'int flags']),
    ('userfaultfd', ['int flags']),
    ('membarrier', ['int cmd', 'unsigned int flags', 'int cpu_id']),
    ('mlock2', ['unsigned long start', 'size_t len', 'int flags']),
    ('copy_file_range', ['int fd_in', 'loff_t __user *off_in', 'int fd_out', 'loff_t __user *off_out', 'size_t len', 'unsigned int flags']),
    ('preadv2', ['unsigned long fd', 'const struct iovec __user *vec', 'unsigned long vlen', 'unsigned long pos_l', 'unsigned long pos_h', 'rwf_t flags']),
    ('pwritev2', ['unsigned long fd', 'const struct iovec __user *vec', 'unsigned long vlen', 'unsigned long pos_l', 'unsigned long pos_h', 'rwf_t flags']),
    ('pkey_mprotect', ['unsigned long start', 'size_t len', 'unsigned long prot', 'int pkey']),
    ('pkey_alloc', ['unsigned long flags', 'unsigned long init_val']),
    ('pkey_free', ['int pkey']),
    ('statx', ['int dfd', 'const char __user *path', 'unsigned flags', 'unsigned mask', 'struct statx __user *buffer']),
    ('io_pgetevents', ['aio_context_t ctx_id', 'long min_nr', 'long nr', 'struct io_event __user *events', 'struct __kernel_timespec __user *timeout', 'const struct __aio_sigset *sig']),
    ('rseq', ['struct rseq __user *rseq', 'uint32_t rseq_len', 'int flags', 'uint32_t sig']),
    ('pidfd_send_signal', ['int pidfd', 'int sig', 'siginfo_t __user *info', 'unsigned int flags']),
    ('io_uring_setup', ['u32 entries', 'struct io_uring_params __user *p']),
    ('io_uring_enter', ['unsigned int fd', 'u32 to_submit', 'u32 min_complete', 'u32 flags', 'const void __user *argp', 'size_t argsz']),
    ('io_uring_register', ['unsigned int fd', 'unsigned int op', 'void __user *arg', 'unsigned int nr_args']),
    ('open_tree', ['int dfd', 'const char __user *path', 'unsigned flags']),
    ('move_mount', ['int from_dfd', 'const char __user *from_path', 'int to_dfd', 'const char __user *to_path', 'unsigned int ms_flags']),
    ('fsopen', ['const char __user *fs_name', 'unsigned int flags']),
    ('fsconfig', ['int fs_fd', 'unsigned int cmd', 'const char __user *key', 'const void __user *value', 'int aux']),
    ('fsmount', ['int fs_fd', 'unsigned int flags', 'unsigned int ms_flags']),
    ('fspick', ['int dfd', 'const char __user *path', 'unsigned int flags']),
    ('pidfd_open', ['pid_t pid', 'unsigned int flags']),
    ('clone3', ['struct clone_args __user *uargs', 'size_t size']),
    ('close_range', ['unsigned int fd', 'unsigned int max_fd', 'unsigned int flags']),
    ('openat2', ['int dfd', 'const char __user *filename', 'struct open_how *how', 'size_t size']),
    ('pidfd_getfd', ['int pidfd', 'int fd', 'unsigned int flags']),
    ('faccessat2', ['int dfd', 'const char __user *filename', 'int mode', 'int flags']),
    ('process_madvise', ['int pidfd', 'const struct iovec __user *vec', 'size_t vlen', 'int behavior', 'unsigned int flags']),
    ('epoll_pwait2', ['int epfd', 'struct epoll_event __user *events', 'int maxevents', 'const struct __kernel_timespec __user *timeout', 'const sigset_t __user *sigmask', 'size_t sigsetsize']),
    ('mount_setattr', ['int dfd', 'const char __user *path', 'unsigned int flags', 'struct mount_attr __user *uattr', 'size_t usize']),
    ('quotactl_fd', ['unsigned int fd', 'unsigned int cmd', 'qid_t id', 'void __user *addr']),
    ('landlock_create_ruleset', ['const struct landlock_ruleset_attr __user *attr', 'size_t size', '__u32 flags']),
    ('landlock_add_rule', ['int ruleset_fd', 'enum landlock_rule_type rule_type', 'const void __user *rule_attr', '__u32 flags']),
    ('landlock_restrict_self', ['int ruleset_fd', '__u32 flags']),
    ('memfd_secret', ['unsigned int flags']),
    ('process_mrelease', ['int pidfd', 'unsigned int flags']),
    ('not implemented', []),
    ('compat_sys_rt_sigaction', ['int', 'const struct compat_sigaction __user *', 'struct compat_sigaction __user *', 'compat_size_t']),
    (None, []),
    ('compat_sys_ioctl', ['unsigned int fd', 'unsigned int cmd', 'compat_ulong_t arg']),
    ('readv', ['unsigned long fd', 'const struct iovec __user *vec', 'unsigned long vlen']),
    ('writev', ['unsigned long fd', 'const struct iovec __user *vec', 'unsigned long vlen']),
    ('compat_sys_recvfrom', ['int fd', 'void __user *buf', 'compat_size_t len', 'unsigned flags', 'struct sockaddr __user *addr', 'int __user *addrlen']),
    ('compat_sys_sendmsg', ['int fd', 'struct compat_msghdr __user *msg', 'unsigned flags']),
    ('compat_sys_recvmsg', ['int fd', 'struct compat_msghdr __user *msg', 'unsigned int flags']),
    ('compat_sys_execve', ['const char __user *filename', 'const compat_uptr_t __user *argv', 'const compat_uptr_t __user *envp']),
    ('compat_sys_ptrace', ['compat_long_t request', 'compat_long_t pid', 'compat_long_t addr', 'compat_long_t data']),
    ('compat_sys_rt_sigpending', ['compat_sigset_t __user *uset', 'compat_size_t sigsetsize']),
    ('compat_sys_rt_sigtimedwait_time64', ['compat_sigset_t __user *uthese', 'struct compat_siginfo __user *uinfo', 'struct __kernel_timespec __user *uts', 'compat_size_t sigsetsize']),
    ('compat_sys_rt_sigqueueinfo', ['compat_pid_t pid', 'int sig', 'struct compat_siginfo __user *uinfo']),
    ('compat_sys_sigaltstack', ['const compat_stack_t __user *uss_ptr', 'compat_stack_t __user *uoss_ptr']),
    ('compat_sys_timer_create', ['clockid_t which_clock', 'struct compat_sigevent __user *timer_event_spec', 'timer_t __user *created_timer_id']),
    ('compat_sys_mq_notify', ['mqd_t mqdes', 'const struct compat_sigevent __user *u_notification']),
    ('compat_sys_kexec_load', ['compat_ulong_t entry', 'compat_ulong_t nr_segments', 'struct compat_kexec_segment __user *', 'compat_ulong_t flags']),
    ('compat_sys_waitid', ['int', 'compat_pid_t', 'struct compat_siginfo __user *', 'int', 'struct compat_rusage __user *']),
    ('compat_sys_set_robust_list', ['struct compat_robust_list_head __user *head', 'compat_size_t len']),
    ('compat_sys_get_robust_list', ['int pid', 'compat_uptr_t __user *head_ptr', 'compat_size_t __user *len_ptr']),
    ('vmsplice', ['int fd', 'const struct iovec __user *iov', 'unsigned long nr_segs', 'unsigned int flags']),
    ('move_pages', ['pid_t pid', 'unsigned long nr_pages', 'const void __user * __user *pages', 'const int __user *nodes', 'int __user *status', 'int flags']),
    ('compat_sys_preadv64', ['unsigned long fd', 'const struct iovec __user *vec', 'unsigned long vlen', 'loff_t pos']),
    ('compat_sys_pwritev64', ['unsigned long fd', 'const struct iovec __user *vec', 'unsigned long vlen', 'loff_t pos']),
    ('compat_sys_rt_tgsigqueueinfo', ['compat_pid_t tgid', 'compat_pid_t pid', 'int sig', 'struct compat_siginfo __user *uinfo']),
    ('compat_sys_recvmmsg_time64', ['int fd', 'struct compat_mmsghdr __user *mmsg', 'unsigned vlen', 'unsigned int flags', 'struct __kernel_timespec __user *timeout']),
    ('compat_sys_sendmmsg', ['int fd', 'struct compat_mmsghdr __user *mmsg', 'unsigned vlen', 'unsigned int flags']),
    ('process_vm_readv', ['pid_t pid', 'const struct iovec __user *lvec', 'unsigned long liovcnt', 'const struct iovec __user *rvec', 'unsigned long riovcnt', 'unsigned long flags']),
    ('process_vm_writev', ['pid_t pid', 'const struct iovec __user *lvec', 'unsigned long liovcnt', 'const struct iovec __user *rvec', 'unsigned long riovcnt', 'unsigned long flags']),
    ('setsockopt', ['int fd', 'int level', 'int optname', 'char __user *optval', 'int optlen']),
    ('getsockopt', ['int fd', 'int level', 'int optname', 'char __user *optval', 'int __user *optlen']),
    ('compat_sys_io_setup', ['unsigned nr_reqs', 'u32 __user *ctx32p']),
    ('compat_sys_io_submit', ['compat_aio_context_t ctx_id', 'int nr', 'u32 __user *iocb']),
    ('compat_sys_execveat', ['int dfd', 'const char __user *filename', 'const compat_uptr_t __user *argv', 'const compat_uptr_t __user *envp', 'int flags']),
    ('compat_sys_preadv64v2', ['unsigned long fd', 'const struct iovec __user *vec', 'unsigned long vlen', 'loff_t pos', 'rwf_t flags']),
    ('compat_sys_pwritev64v2', ['unsigned long fd', 'const struct iovec __user *vec', 'unsigned long vlen', 'loff_t pos', 'rwf_t flags']),
]

class CoreLifterSyscallLinux64(CoreLifter):
    def setup(self):
        super().setup()
        self.h_body.append('#include "syscalls.h"')
        self.functions.append('#define CALLOTHER_syscall() __dispatch_syscall(RAX)')

class ProgramLifterSyscallLinux64(ProgramLifter):
    def emit(self, directory: str) -> None:
        for r in [SYSCALL_N_REG, SYSCALL_OUT_REG] + SYSCALL_ARGS:
            self.lifter.core.used_registers_offset.add(self.lifter.core.register_name_to_offset[r.upper()])
        syscalls_h_path = os.path.join(directory, 'syscalls.h')
        if not os.path.isfile(syscalls_h_path):
            self.emit_syscalls_h(syscalls_h_path)
        super().emit(directory)

    def emit_syscalls_h(self, path: str) -> None:
        with open(path, 'w') as f:
            emitter = CodeEmitter(f)
            emitter.emit(self.generate_syscall_helper_functions())
            emitter.emit(self.generate_syscalls_dispatcher())

    def generate_syscalls_dispatcher(self) -> str:
        return '\n'.join((
            'static inline void __dispatch_syscall(int n) {',
            'switch (n) {',
            self.generate_syscalls_dispatcher_cases(),
            '}',
            '}',
        ))

    def generate_syscalls_dispatcher_cases(self) -> str:
        cases = []
        for id, (name, params) in enumerate(SYSCALLS):
            args = [SYSCALL_N_REG.upper()]
            for param, reg in zip(params, SYSCALL_ARGS):
                # If the syscall arg is a pointer we need to get the real RAM pointer instead of the emulated one.
                arg = reg.upper()
                if '*' in param:
                    arg = f'(long)RAM_ADDR({arg})'
                args.append(arg)
            call = f' __syscall{len(args)-1}({", ".join(args)})'
            cases.append(f'case {id}: {SYSCALL_OUT_REG.upper()} = {call}; break; // {name}({", ".join(params)})')
        return '\n'.join(cases)

    def generate_syscall_helper_functions(self) -> str:
        funs = []
        for i in range(len(SYSCALL_ARGS) + 1):
            regs = [SYSCALL_N_REG] + SYSCALL_ARGS[:i]
            vars = [(f'_{r}' if REG_TO_CONSTRAINT[r] == GENERIC_CONSTRAINT else r) for r in regs]
            params = ', '.join(f'long {r}' for r in regs)
            generic_constraints = ''.join(
                f'register long {v} __asm__("{r}") = {r};\n' for r, v in zip(regs, vars) if v[0] == '_')
            constraints = ', '.join(f'"{REG_TO_CONSTRAINT[r]}"({v})' for r, v in zip(regs, vars))
            clobbers = ', '.join(f'"{c}"' for c in SYSCALL_CLOBBERS)
            funs.append(f'''
                static inline long __syscall{i}({params}) {{
                    unsigned long ret;
                    {generic_constraints}
                    __asm__ __volatile__(
                        "syscall"
                        : "={SYSCALL_OUT_REG}"(ret)
                        : {constraints}
                        : {clobbers}
                    );
                    return ret;
                }}
            ''')
        return ''.join(funs)

    def syscall_helper_args_to_name(self, n_args: int, args_with_pointer: list[int]) -> str:
        return f'__sys_{n_args}_{"".join(map(str, args_with_pointer))}'